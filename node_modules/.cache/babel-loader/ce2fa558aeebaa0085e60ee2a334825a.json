{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nguye\\\\Documents\\\\Thinkful\\\\qualified-challenges\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Deck.js\",\n    _s = $RefreshSig$();\n\n// import React, {useEffect, useState} from \"react\";\n// import {Link, useHistory, useParams} from \"react-router-dom\";\n// import {deleteCard, deleteDeck, readDeck} from \"../utils/api/index\";\n// function Deck() {\n//     const history = useHistory();\n//     const params = useParams();\n//     const [newDeck, setNewDeck] = useState(null);\n//     const [newCards, setNewCards] = useState(null);\n//     useEffect(() => {\n//         async function loadDecks() {\n//             setNewDeck([]);\n//             setNewCards([]);\n//             try {\n//                 const response = await readDeck(params.deckId)\n//                 setNewDeck(response);\n//                 const {cards} = response;\n//                 setNewCards(cards);\n//             } catch (error) {\n//                 console.log(error);\n//             }\n//         }\n//         loadDecks()\n//     }, [params])\n//     if(newDeck && newCards){\n//         return (\n//             <div>\n//                 <div>\n//                     <Link to={\"/\"}>Home</Link> / {newDeck.name}\n//                 </div>\n//                 <div>\n//                     <h3>{newDeck.name}</h3>\n//                     <p>{newDeck.description}</p>\n//                     <button onClick={() => {history.push(`/decks/${newDeck.id}/edit`)}}>Edit</button>\n//                     <button onClick={() => {history.push(`/decks/${newDeck.id}/study`)}}>Study</button>\n//                     <button onClick={() => {history.push(`/decks/${newDeck.id}/cards/new`)}}>Add Cards</button>\n//                     <button onClick={() => {\n//                         if(window.confirm(\"Delete deck?\")){\n//                             deleteDeck(`${newDeck.id}`);\n//                             history.push(\"/\");\n//                         }}}>\n//                         Delete\n//                     </button>\n//                 </div>\n//                 <div>\n//                     <h2>Cards</h2>\n//                     <ul>\n//                         {newCards.map((card) => {\n//                             <li key={card.id}>\n//                                 {card.front}\n//                                 <div>{card.back}</div>\n//                             <button onClick={() => {history.push(`/decks/${card.id}/edit`)}}>Edit</button>\n//                             <button onClick={() => {\n//                                 if(window.confirm(\"Delete this card?\")){\n//                                     deleteCard(`${card.id}`);\n//                                     history.push(`/decks/${params.deckId}`)\n//                                 }}}>\n//                             Delete\n//                             </button>\n//                             </li>\n//                         })}\n//                     </ul>\n//                 </div>    \n//             </div>\n//         );\n//     } \n// }\n// export default Deck;\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { deleteCard, deleteDeck, readDeck } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeckInfo() {\n  _s();\n\n  const params = useParams();\n  const history = useHistory();\n  const [currentDeck, setCurrentDeck] = useState(null);\n  const [currentCards, setCurrentCards] = useState(null);\n  useEffect(() => {\n    async function loadDeck() {\n      setCurrentDeck([]);\n      setCurrentCards([]);\n\n      try {\n        const response = await readDeck(params.deckId);\n        setCurrentDeck(response);\n        const {\n          cards\n        } = response;\n        setCurrentCards(cards);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    loadDeck();\n  }, [params]);\n\n  if (currentDeck && currentCards) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), \" / \", currentDeck.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: currentDeck.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: currentDeck.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            history.push(`/decks/${currentDeck.id}/edit`);\n          },\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            history.push(`/decks/${currentDeck.id}/study`);\n          },\n          children: \"Study\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            history.push(`/decks/${currentDeck.id}/cards/new`);\n          },\n          children: \"Add Cards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (window.confirm(\"Delete this deck?\")) {\n              deleteDeck(`${currentDeck.id}`);\n              history.push(\"/\");\n            }\n          },\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Cards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: currentCards.map(card => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [card.front, /*#__PURE__*/_jsxDEV(\"div\", {\n              children: card.back\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                history.push(`/decks/${currentDeck.id}/cards/${card.id}/edit`);\n              },\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                if (window.confirm(\"Delete this card?\")) {\n                  deleteCard(`${card.id}`);\n                  history.push(`/decks/${params.deckId}`);\n                }\n              },\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 33\n            }, this)]\n          }, card.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this);\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DeckInfo, \"bHMxrxsPWCHOG9JOBnlSduDqGcI=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = DeckInfo;\n;\nexport default DeckInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckInfo\");","map":{"version":3,"sources":["C:/Users/nguye/Documents/Thinkful/qualified-challenges/Project_Flashcards_Qualified_1/src/Layout/Deck.js"],"names":["React","useEffect","useState","Link","useHistory","useParams","deleteCard","deleteDeck","readDeck","DeckInfo","params","history","currentDeck","setCurrentDeck","currentCards","setCurrentCards","loadDeck","response","deckId","cards","error","console","log","name","description","push","id","window","confirm","map","card","front","back"],"mappings":";;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,SAA3B,QAA4C,kBAA5C;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,QAAjC,QAAiD,cAAjD;;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAChB,QAAMC,MAAM,GAAGL,SAAS,EAAxB;AACA,QAAMM,OAAO,GAAGP,UAAU,EAA1B;AAEA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,IAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAee,QAAf,GAA0B;AACtBH,MAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,MAAAA,eAAe,CAAC,EAAD,CAAf;;AACA,UAAI;AACA,cAAME,QAAQ,GAAG,MAAMT,QAAQ,CAACE,MAAM,CAACQ,MAAR,CAA/B;AACAL,QAAAA,cAAc,CAACI,QAAD,CAAd;AACA,cAAM;AAAEE,UAAAA;AAAF,YAAYF,QAAlB;AACAF,QAAAA,eAAe,CAACI,KAAD,CAAf;AACH,OALD,CAKE,OAAOC,KAAP,EAAc;AAACC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAAmB;AACvC;;AACDJ,IAAAA,QAAQ;AACX,GAZQ,EAYN,CAACN,MAAD,CAZM,CAAT;;AAcA,MAAIE,WAAW,IAAIE,YAAnB,EAAiC;AAC7B,wBACI;AAAA,8BACI;AAAA,gCACI,QAAC,IAAD;AAAM,UAAA,EAAE,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,SACgCF,WAAW,CAACW,IAD5C;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAA,gCACI;AAAA,oBAAKX,WAAW,CAACW;AAAjB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAIX,WAAW,CAACY;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAQ,UAAA,OAAO,EAAE,MAAM;AAACb,YAAAA,OAAO,CAACc,IAAR,CAAc,UAASb,WAAW,CAACc,EAAG,OAAtC;AAA8C,WAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAQ,UAAA,OAAO,EAAE,MAAM;AAACf,YAAAA,OAAO,CAACc,IAAR,CAAc,UAASb,WAAW,CAACc,EAAG,QAAtC;AAA+C,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAQ,UAAA,OAAO,EAAE,MAAM;AAACf,YAAAA,OAAO,CAACc,IAAR,CAAc,UAASb,WAAW,CAACc,EAAG,YAAtC;AAAmD,WAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAQ,UAAA,OAAO,EAAE,MAAM;AACnB,gBAAGC,MAAM,CAACC,OAAP,CAAe,mBAAf,CAAH,EAAuC;AACnCrB,cAAAA,UAAU,CAAE,GAAEK,WAAW,CAACc,EAAG,EAAnB,CAAV;AACAf,cAAAA,OAAO,CAACc,IAAR,CAAa,GAAb;AACH;AAAC,WAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAkBI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBACKX,YAAY,CAACe,GAAb,CAAkBC,IAAD,iBACd;AAAA,uBACKA,IAAI,CAACC,KADV,eAEI;AAAA,wBAAMD,IAAI,CAACE;AAAX;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAQ,cAAA,OAAO,EAAE,MAAM;AAACrB,gBAAAA,OAAO,CAACc,IAAR,CAAc,UAASb,WAAW,CAACc,EAAG,UAASI,IAAI,CAACJ,EAAG,OAAvD;AAA+D,eAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII;AAAQ,cAAA,OAAO,EAAE,MAAM;AACnB,oBAAGC,MAAM,CAACC,OAAP,CAAe,mBAAf,CAAH,EAAuC;AACnCtB,kBAAAA,UAAU,CAAE,GAAEwB,IAAI,CAACJ,EAAG,EAAZ,CAAV;AACAf,kBAAAA,OAAO,CAACc,IAAR,CAAc,UAASf,MAAM,CAACQ,MAAO,EAArC;AACH;AAAC,eAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ;AAAA,aAASY,IAAI,CAACJ,EAAd;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAwCH;;AAAA;AACD,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GAlEQjB,Q;UACUJ,S,EACCD,U;;;KAFXK,Q;AAkER;AAED,eAAeA,QAAf","sourcesContent":["// import React, {useEffect, useState} from \"react\";\r\n// import {Link, useHistory, useParams} from \"react-router-dom\";\r\n// import {deleteCard, deleteDeck, readDeck} from \"../utils/api/index\";\r\n\r\n// function Deck() {\r\n//     const history = useHistory();\r\n//     const params = useParams();\r\n\r\n//     const [newDeck, setNewDeck] = useState(null);\r\n//     const [newCards, setNewCards] = useState(null);\r\n\r\n//     useEffect(() => {\r\n//         async function loadDecks() {\r\n//             setNewDeck([]);\r\n//             setNewCards([]);\r\n//             try {\r\n//                 const response = await readDeck(params.deckId)\r\n//                 setNewDeck(response);\r\n//                 const {cards} = response;\r\n//                 setNewCards(cards);\r\n//             } catch (error) {\r\n//                 console.log(error);\r\n//             }\r\n//         }\r\n//         loadDecks()\r\n//     }, [params])\r\n\r\n//     if(newDeck && newCards){\r\n//         return (\r\n//             <div>\r\n//                 <div>\r\n//                     <Link to={\"/\"}>Home</Link> / {newDeck.name}\r\n//                 </div>\r\n//                 <div>\r\n//                     <h3>{newDeck.name}</h3>\r\n//                     <p>{newDeck.description}</p>\r\n//                     <button onClick={() => {history.push(`/decks/${newDeck.id}/edit`)}}>Edit</button>\r\n//                     <button onClick={() => {history.push(`/decks/${newDeck.id}/study`)}}>Study</button>\r\n//                     <button onClick={() => {history.push(`/decks/${newDeck.id}/cards/new`)}}>Add Cards</button>\r\n//                     <button onClick={() => {\r\n//                         if(window.confirm(\"Delete deck?\")){\r\n//                             deleteDeck(`${newDeck.id}`);\r\n//                             history.push(\"/\");\r\n//                         }}}>\r\n//                         Delete\r\n//                     </button>\r\n//                 </div>\r\n//                 <div>\r\n//                     <h2>Cards</h2>\r\n//                     <ul>\r\n//                         {newCards.map((card) => {\r\n//                             <li key={card.id}>\r\n//                                 {card.front}\r\n//                                 <div>{card.back}</div>\r\n//                             <button onClick={() => {history.push(`/decks/${card.id}/edit`)}}>Edit</button>\r\n//                             <button onClick={() => {\r\n//                                 if(window.confirm(\"Delete this card?\")){\r\n//                                     deleteCard(`${card.id}`);\r\n//                                     history.push(`/decks/${params.deckId}`)\r\n//                                 }}}>\r\n//                             Delete\r\n//                             </button>\r\n//                             </li>\r\n//                         })}\r\n//                     </ul>\r\n//                 </div>    \r\n//             </div>\r\n//         );\r\n\r\n//     } \r\n// }\r\n// export default Deck;\r\n\r\n\r\nimport React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { deleteCard, deleteDeck, readDeck } from \"../utils/api\";\r\n\r\nfunction DeckInfo() {\r\n    const params = useParams();\r\n    const history = useHistory();\r\n\r\n    const [currentDeck, setCurrentDeck] = useState(null)\r\n    const [currentCards, setCurrentCards] = useState(null);\r\n\r\n    useEffect(() => {\r\n        async function loadDeck() {\r\n            setCurrentDeck([]);\r\n            setCurrentCards([]);\r\n            try {\r\n                const response = await readDeck(params.deckId);\r\n                setCurrentDeck(response);\r\n                const { cards } = response;\r\n                setCurrentCards(cards);\r\n            } catch (error) {console.log(error)}\r\n        }\r\n        loadDeck()\r\n    }, [params])\r\n    \r\n    if (currentDeck && currentCards) {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Link to=\"/\">Home</Link> / {currentDeck.name}\r\n                </div>\r\n                <div>\r\n                    <h2>{currentDeck.name}</h2>\r\n                    <p>{currentDeck.description}</p>\r\n                    <button onClick={() => {history.push(`/decks/${currentDeck.id}/edit`)}}>Edit</button>\r\n                    <button onClick={() => {history.push(`/decks/${currentDeck.id}/study`)}}>Study</button>\r\n                    <button onClick={() => {history.push(`/decks/${currentDeck.id}/cards/new`)}}>Add Cards</button>\r\n                    <button onClick={() => {\r\n                        if(window.confirm(\"Delete this deck?\")){\r\n                            deleteDeck(`${currentDeck.id}`)\r\n                            history.push(\"/\")\r\n                        }}}>\r\n                    Delete\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    <h3>Cards</h3>\r\n                    <ul>\r\n                        {currentCards.map((card) => (\r\n                            <li key={card.id}>\r\n                                {card.front}\r\n                                <div>{card.back}</div>\r\n                                <button onClick={() => {history.push(`/decks/${currentDeck.id}/cards/${card.id}/edit`)}}>Edit</button>\r\n                                <button onClick={() => {\r\n                                    if(window.confirm(\"Delete this card?\")){\r\n                                        deleteCard(`${card.id}`);\r\n                                        history.push(`/decks/${params.deckId}`)\r\n                                    }}}>\r\n                                Delete\r\n                                </button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n    return (\r\n        <p>Loading...</p>\r\n    );\r\n};\r\n\r\nexport default DeckInfo;"]},"metadata":{},"sourceType":"module"}