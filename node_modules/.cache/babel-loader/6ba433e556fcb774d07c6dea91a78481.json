{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nguye\\\\Documents\\\\Thinkful\\\\qualified-challenges\\\\flashcard-app-proj\\\\src\\\\Layout\\\\StudyFlip.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(({\n  currCard\n}) => {\n  _s();\n\n  const params = useParams();\n  const history = useHistory();\n  const [count, setCount] = useState(1);\n  const [side, setSide] = useState(null);\n  const [studyCount, setStudyCount] = useState(0);\n  const [studyCard, setStudyCard] = useState(null);\n  const orderedCards = currCard.sort((a, b) => a.id - b.id);\n  console.log(currCard);\n  useEffect(() => {\n    if (currCard.length > 2) {\n      setSide(true);\n    }\n\n    setStudyCard(orderedCards[studyCount]);\n  }, [currCard]);\n\n  const handleNextCard = event => {\n    event.preventDefault();\n    setSide(!side);\n    setCount(currentCard => currentCard++);\n    setStudyCount(currentCard => currentCard++);\n    setStudyCard(orderedCards[studyCount++]);\n\n    if (currCard.length <= count) {\n      if (window.confirm(\"Restart Cards?\")) {\n        setCount(1);\n        setStudyCard(0);\n        history.push(`/decks/${params.deckId}/study`);\n      } else {\n        history.push(\"/\");\n      }\n    }\n  };\n\n  const handleAdd = event => {\n    event.preventDefault();\n    history.push(`/decks/${params.deckId}/cards/new`);\n  };\n\n  const handleCardFlip = event => {\n    event.preventDefault();\n    setSide(!side);\n  };\n\n  console.log(studyCard);\n\n  if (side === true && studyCard) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Card \", count, \" of \", currCard.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this), studyCard.front, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCardFlip,\n        children: \"Flip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this);\n  }\n\n  if (side === false && studyCard) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Card \", count, \" of \", currCard.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this), studyCard.back, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCardFlip,\n        children: \"Flip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextCard,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Not enough cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You need at least 3 cards to study. There are \", currCard.length, \" in this deck\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAdd,\n        children: \"+Add Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this);\n  }\n}, \"ho4qoY1MdjXxeChEQBsDbk3WtrI=\", false, function () {\n  return [useParams, useHistory];\n});","map":{"version":3,"sources":["C:/Users/nguye/Documents/Thinkful/qualified-challenges/flashcard-app-proj/src/Layout/StudyFlip.js"],"names":["React","useEffect","useState","useHistory","useParams","currCard","params","history","count","setCount","side","setSide","studyCount","setStudyCount","studyCard","setStudyCard","orderedCards","sort","a","b","id","console","log","length","handleNextCard","event","preventDefault","currentCard","window","confirm","push","deckId","handleAdd","handleCardFlip","front","back"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\nexport default ({currCard}) => {\r\n    const params = useParams();\r\n    const history = useHistory();\r\n\r\n    const [count, setCount] = useState(1);\r\n    const [side, setSide] = useState(null);\r\n    const [studyCount, setStudyCount] = useState(0);\r\n    const [studyCard, setStudyCard] = useState(null);\r\n    const orderedCards = currCard.sort((a,b) => a.id - b.id);\r\n    console.log(currCard);\r\n        useEffect(() => {\r\n            if(currCard.length > 2){\r\n                setSide(true);\r\n            }\r\n            setStudyCard(orderedCards[studyCount]);\r\n        },[currCard])\r\n\r\n        const handleNextCard = (event) => {\r\n            event.preventDefault();\r\n            setSide(!side);\r\n            setCount((currentCard) => currentCard++);\r\n            setStudyCount((currentCard) => currentCard++);\r\n            setStudyCard(orderedCards[studyCount++])\r\n            if(currCard.length <= count){\r\n                if(window.confirm(\"Restart Cards?\")){\r\n                    setCount(1);\r\n                    setStudyCard(0);\r\n                    history.push(`/decks/${params.deckId}/study`)\r\n                } else {\r\n                    history.push(\"/\");\r\n                }\r\n            }\r\n        }\r\n\r\n        const handleAdd = (event) => {\r\n            event.preventDefault();\r\n            history.push(`/decks/${params.deckId}/cards/new`)\r\n        }\r\n    \r\n        const handleCardFlip = (event) => {\r\n            event.preventDefault();\r\n            setSide(!side);\r\n        }\r\n\r\n        console.log(studyCard);\r\n        if((side === true) && studyCard) {\r\n            return (\r\n                <div>\r\n                    <h4>Card {count} of {currCard.length}</h4>\r\n                    {studyCard.front}\r\n                    <br />\r\n                    <button onClick={handleCardFlip}>Flip</button>\r\n                </div>\r\n            );\r\n        }\r\n        if((side === false) && studyCard){\r\n            return(\r\n                <div>\r\n                    <h4>Card {count} of {currCard.length}</h4>\r\n                    {studyCard.back}\r\n                    <br />\r\n                    <button onClick={handleCardFlip}>Flip</button>\r\n                    <button onClick={handleNextCard}>Next</button>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <h4>Not enough cards</h4>\r\n                    <p>You need at least 3 cards to study. There are {currCard.length} in this deck</p>\r\n                    <button onClick={handleAdd}>+Add Cards</button>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n"]},"metadata":{},"sourceType":"module"}